/****************************************************************************/
/* Auther: Mahmoud Adel                                                     */
/* Version: V01                                                             */
/* Date: 8 Augest 2020                                                      */
/****************************************************************************/

#include "STD_TYPES.h"
#include "BIT_MATH.h"

#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_VoidInitSysClock(void)
{
  #if     RCC_CLOCK_TYPE == RCC_HSE_CRYSTAL
      RCC_CR   = 0x00010000;                         /* Enable HSE without Bybass */
      RCC_CFGR = 0x000000001;
  #elif   RCC_CLOCK_TYPE == RCC_HSE_RC
      RCC_CR   = 0x00050000;                         /* Enable HSE with Bybass */
      RCC_CFGR = 0x000000001;
  #elif   RCC_CLOCK_TYPE == RCC_HSI
      RCC_CR   = 0x00000001;                         /*  Enable HSI  */
      RCC_CFGR = 0x000000000;
  #elif   RCC_CLOCK_TYPE == RCC_PLL
      #if    RCC_PLL_INPUT == RCC_PLL_IN_HSE
             RCC_CFGR  = 0x00010002;                 /* HSE input of PLL */
             RCC_CFGR |= ((RCC_PLL_MUL_VAL)<<18);    /* Multiplication factor Selection */
             RCC_CR    = 0x01010000;                 /* Enable PLL Wih HSE */
             /* Bybass mode configuration */
             #if RCC_PLL_HSE_BYBASS == BYBASS_ON
                RCC_CR = 0x01050000;
             #else
                RCC_CR = 0x01010000;
             #endif
      #elif  RCC_PLL_INPUT == RCC_PLL_IN_HSE_DIV_2
             RCC_CFGR  = 0x00030002;                 /* HSE/2 input of PLL */
             RCC_CFGR |= ((RCC_PLL_MUL_VAL)<<18);    /* Multiplication factor Selection */
             RCC_CR    = 0x01010000;                 /* Enable PLL Wih HSE */
             /* Bybass mode configuration */
             #if RCC_PLL_HSE_BYBASS == BYBASS_ON
                RCC_CR = 0x01050000;
             #else
                RCC_CR = 0x01010000;
             #endif
      #elif  RCC_PLL_INPUT == RCC_PLL_IN_HSI_DIV_2
             RCC_CFGR  = 0x00000002;
             RCC_CFGR |= ((RCC_PLL_MUL_VAL)<<18);    /* Multiplication factor Selection */
             RCC_CR    = 0x01000001;                 /* Enable PLL with HSI src */

      #endif

  #else
      #error "You choosed a wrong type"
  #endif
}


void RCC_VoidEnableClock(u8 Copy_u8BusId ,u8 Copy_u8PerId)
{
  if (Copy_u8PerId <= 31)
  {
    switch (Copy_u8BusId)
    {
      case  RCC_AHB  : SET_BIT(RCC_AHBENR, Copy_u8PerId);    break;
      case  RCC_APB1 : SET_BIT(RCC_APB1ENR , Copy_u8PerId);  break;
      case  RCC_APB2 : SET_BIT(RCC_APB2ENR , Copy_u8PerId);  break;
      default        : /*Return Error*/                      break;
    }
  }

  else
  {
    /*Return Error*/
    //#error "Wrong peripheral ID"
  }
}


void RCC_VoidDisableClock(u8 Copy_u8BusId ,u8 Copy_u8PerId)
{
  if (Copy_u8PerId <= 31)
  {
    switch (Copy_u8BusId)
    {
      case  RCC_AHB  : CLR_BIT(RCC_AHBENR, Copy_u8PerId);    break;
      case  RCC_APB1 : CLR_BIT(RCC_APB1ENR , Copy_u8PerId);  break;
      case  RCC_APB2 : CLR_BIT(RCC_APB2ENR , Copy_u8PerId);  break;
      default        : /*Return Error*/                      break;
    }
  }

  else
  {
    /*Return Error*/
    //#error "Wrong peripheral ID"
  }
}

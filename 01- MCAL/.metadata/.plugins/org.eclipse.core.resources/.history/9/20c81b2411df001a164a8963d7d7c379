/****************************************************************************/
/* Auther: Mahmoud Adel                                                     */
/* Version: V01                                                             */
/* Date: 8 Augest 2020                                                      */
/****************************************************************************/

#include "Libraries/STD_TYPES.h"
#include "Libraries/BIT_MATH.h"

#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_VoidEnableClock(u8 Copy_u8BusId ,u8 Copy_u8PerId)
{
  if (Copy_u8PerId <= 31)
  {
    switch (Copy_u8BusId)
    {
      case  RCC_AHB  : SET_BIT(RCC_AHBENR, Copy_u8PerId);    break;
      case  RCC_APB1 : SET_BIT(RCC_APB1ENR , Copy_u8PerId);  break;
      case  RCC_APB2 : SET_BIT(RCC_APB2ENR , Copy_u8PerId);  break;
      default        : /*Return Error*/                      break;
    }
  }

  else
  {
    /*Return Error*/
    #Error ("Wrong peripheral ID");
  }
}


void RCC_VoidDisableClock(u8 Copy_u8BusId ,u8 Copy_u8PerId)
{
  if (Copy_u8PerId <= 31)
  {
    switch (Copy_u8BusId)
    {
      case  RCC_AHB  : CLR_BIT(RCC_AHBENR, Copy_u8PerId);    break;
      case  RCC_APB1 : CLR_BIT(RCC_APB1ENR , Copy_u8PerId);  break;
      case  RCC_APB2 : CLR_BIT(RCC_APB2ENR , Copy_u8PerId);  break;
      default        : /*Return Error*/                      break;
    }
  }

  else
  {
    /*Return Error*/
    #Error ("Wrong peripheral ID");
  }
}
